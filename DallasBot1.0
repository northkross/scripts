#!/bin/bash

echo "Hello! Welcome to the DallasBot!"

# === Auto Updates ===
echo "Applying automatic updates..."

if command -v apt &> /dev/null; then
  if ! dpkg -l | grep -qw unattended-upgrades; then
    echo "Installing unattended-upgrades..."
    apt update
    apt install -y unattended-upgrades
  fi

  AUTO_UPGRADES_FILE="/etc/apt/apt.conf.d/20auto-upgrades"

  if [ -f "$AUTO_UPGRADES_FILE" ]; then
    echo "Enabling Unattended Upgrades..."
    sed -i 's/^APT::Periodic::Update-Package-Lists "0"/APT::Periodic::Update-Package-Lists "1"/' "$AUTO_UPGRADES_FILE"
    sed -i 's/^APT::Periodic::Unattended-Upgrade "0"/APT::Periodic::Unattended-Upgrade "1"/' "$AUTO_UPGRADES_FILE"
  fi

if command -v dnf &> /dev/null; then
  if ! dnf list installed | grep -qw dnf-automatic; then
    echo "Installing dnf-automatic..."
    dnf install -y dnf-automatic
  fi

  AUTO_CONF_FILE="/etc/dnf/automatic.conf"

  if [ -f "$AUTO_CONF_FILE" ]; then
    echo "Enabling dnf auto updates..."
    sed -i 's/^apply_updates = no/apply_updates = yes/' "$AUTO_CONF_FILE"
    systemctl enable dnf-automatic.timer
    systemctl start dnf-automatic.timer
  fi

# === Firewall ===

  if dpkg -l | grep -qw ufw; then
    echo "Enabling Firewall..."
    ufw enable
    echo "Configuring Firewall..."
    ufw logging high
    ufw default deny
    fi
  fi
  if dpkg -l | grep -qw firewalld; then
    echo "Starting Firewall..."
    systemctl start firewalld
    echo "Enabling Firewall..."
    systemctl enable firewalld
    fi
  fi

 if dnf list installed | grep -qw ufw; then
    echo "Enabling Firewall..."
    ufw enable
    echo "Configuring Firewall..."
    ufw logging high
    ufw default deny
  fi
 if dnf list installed | grep -qw firewalld; then
    echo "Starting Firewall..."
    systemctl start firewalld
    echo "Enabling Firewall..."
    systemctl enable firewalld
  fi
fi


# Initialize arrays
declare -a Admins
declare -a Users
declare -a Services

# === Administrators ===
admincount=0
echo "What are your Authorized Administrators? Input 1 by 1. Type 0 when done."
while true; do
  read -p "Administrator: " input
  if [[ "$input" == "0" ]]; then
    break
  fi
  Admins[$admincount]="$input"
  ((admincount++))
  echo "Who else?"
done

# === Users ===
usercount=0
echo "What are your other Authorized Users? Type 0 when done."
while true; do
  read -p "User: " input
  if [[ "$input" == "0" ]]; then
    break
  fi
  Users[$usercount]="$input"
  ((usercount++))
  echo "Who else?"
done

# === Services ===
servecount=0
echo -e "What Services are on your system? Type the corresponding number:\n0 Done\n1 SSH\n2 FTP\n3 Apache2\n4 MySQL\n5 PHP"
while true; do 
  read -p "Service: " input
  if [[ "$input" == "0" ]]; then
    break
  fi
  Services[$servecount]="$input"
  ((servecount++))
  echo "What else?"
done

adminlength=${#Admins[@]}
userlength=${#Users[@]}
servicelength=${#Services[@]}

for (( i=0; i<servicelength; i++ ))
do
  # === SSH ===
  if [[ "${Services[i]}" == "1" ]]; then
    echo "Configuring SSH..."
    sed -i 's/^#*Port .*/Port 22/' "/etc/ssh/sshd_config"
    sed -i 's/^#*AddressFamily .*/AddressFamily any/' "/etc/ssh/sshd_config"
    sed -i 's/^#*SyslogFacility .*/SyslogFacility AUTH/' "/etc/ssh/sshd_config"
    sed -i 's/^#*LogLevel .*/LogLevel INFO/' "/etc/ssh/sshd_config"
    sed -i 's/^#*LoginGraceTime .*/LoginGraceTime 30/' "/etc/ssh/sshd_config"
    sed -i 's/^#*PermitRootLogin .*/PermitRootLogin no/' "/etc/ssh/sshd_config"
    sed -i 's/^#*StrictModes .*/StrictModes yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*MaxAuthTries .*/MaxAuthTries 3/' "/etc/ssh/sshd_config"
    sed -i 's/^#*MaxSessions .*/MaxSessions 2/' "/etc/ssh/sshd_config"
    sed -i 's/^#*PubkeyAuthentication .*/PubkeyAuthentication yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*HostbasedAuthentication .*/HostbasedAuthentication no/' "/etc/ssh/sshd_config"
    sed -i 's/^#*IgnoreUserKnownHosts .*/IgnoreUserKnownHosts yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*IgnoreRhosts .*/IgnoreRhosts yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*PasswordAuthentication .*/PasswordAuthentication yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*PermitEmptyPasswords .*/PermitEmptyPasswords no/' "/etc/ssh/sshd_config"
    sed -i 's/^#*UsePAM .*/UsePAM yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*X11Forwarding .*/X11Forwarding no/' "/etc/ssh/sshd_config"
    sed -i 's/^#*PrintLastLog .*/PrintLastLog yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*Compression .*/Compression no/' "/etc/ssh/sshd_config"
    sed -i 's/^#*TCPKeepAlive .*/TCPKeepAlive yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*PermitUserEnvironment .*/PermitUserEnvironment no/' "/etc/ssh/sshd_config"
    sed -i 's/^#*UsePrivilegeSeparation .*/UsePrivilegeSeparation yes/' "/etc/ssh/sshd_config"
    sed -i 's/^#*UseDNS .*/UseDNS no/' "/etc/ssh/sshd_config"
    grep -q "^Protocol 2" /etc/ssh/sshd_config || echo "Protocol 2" >> /etc/ssh/sshd_config
    if command -v apt &> /dev/null; then
      ufw allow 22/tcp
    fi
    if command -v dnf &> /dev/null; then
      firewall-cmd --add-port=22/tcp --permanent
    fi
  fi
  if [[ "${Services[i]}" == "2" ]]; then
    # === FTP ===
    echo "Configuring FTP..."
    sed -i 's/^#*listen= .*/listen=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*listen_ipv6= .*/listen_ipv6=NO/' "/etc/vsftpd.conf"
    sed -i 's/^#*anonymous_enable= .*/anonymous_enable=NO/' "/etc/vsftpd.conf"
    sed -i 's/^#*local_enable= .*/local_enable=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*write_enable= .*/write_enable=NO/' "/etc/vsftpd.conf"
    sed -i 's/^#*anon_upload_enable= .*/anon_upload_enable=NO/' "/etc/vsftpd.conf"
    sed -i 's/^#*anon_mkdir_write_enable= .*/anon_mkdir_write_enable=NO/' "/etc/vsftpd.conf"
    sed -i 's/^#*xferlog_enable= .*/xferlog_enable=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*connect_from_port_20= .*/connect_from_port_20=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*chown_uploads= .*/chown_uploads=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*idle_session_timeout= .*/idle_session_timeout=600/' "/etc/vsftpd.conf"
    sed -i 's/^#*data_connection_timeout= .*/data_connection_timeout=120/' "/etc/vsftpd.conf"
    sed -i 's/^#*async_abor_enable= .*/async_abor_enable=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*ascii_upload_enable= .*/ascii_upload_enable=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*ascii_download_enable= .*/ascii_download_enable=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*deny_email_enable= .*/deny_email_enable=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*chroot_local_user= .*/chroot_local_user=YES/' "/etc/vsftpd.conf"
    sed -i 's/^#*chroot_list_enable= .*/chroot_list_enable=YES/' "/etc/vsftpd.conf"
    grep -q "^ssl_enable" /etc/vsftpd.conf || echo "ssl_enable=YES" >> /etc/vsftpd.conf
    grep -q "^allow_anon_ssl" /etc/vsftpd.conf || echo "allow_anon_ssl=NO" >> /etc/vsftpd.conf
    grep -q "^force_local_data_ssl=" /etc/vsftpd.conf || echo "force_local_data_ssl=YES" >> /etc/vsftpd.conf
    grep -q "^force_local_logins_ssl=" /etc/vsftpd.conf || echo "force_local_logins_ssl=YES" >> /etc/vsftpd.conf
    grep -q "^ssl_tlsv1=" /etc/vsftpd.conf || echo "ssl_tlsv1=YES" >> /etc/vsftpd.conf
    grep -q "^ssl_sslv2=" /etc/vsftpd.conf || echo "ssl_sslv2=NO" >> /etc/vsftpd.conf
    grep -q "^ssl_sslv3=" /etc/vsftpd.conf || echo "ssl_sslv3=NO" >> /etc/vsftpd.conf
    grep -q "^require_ssl_reuse=" /etc/vsftpd.conf || echo "require_ssl_reuse=NO" >> /etc/vsftpd.conf
    grep -q "^ssl_ciphers=" /etc/vsftpd.conf || echo "ssl_ciphers=HIGH" >> /etc/vsftpd.conf
    if command -v apt &> /dev/null; then
      ufw allow 20/tcp
      ufw allow 21/tcp
    fi
    if command -v dnf &> /dev/null; then
      firewall-cmd --add-port=20/tcp --permanent
      firewall-cmd --add-port=21/tcp --permanent
    fi
  fi
  if [[ "${Services[i]}" == "3" ]]; then
    # === Apache2 ===
    echo "Configuring Apache2..."
    sed -i 's/^#*Timeout .*/Timeout 300/' "/etc/apache2/apache2.conf"
    sed -i 's/^#*KeepAlive .*/KeepAlive On/' "/etc/apache2/apache2.conf"
    sed -i 's/^#*MaxKeepAliveRequests .*/MaxKeepAliveRequests 100/' "/etc/apache2/apache2.conf"
    sed -i 's/^#*KeepAliveTimeout .*/KeepAliveTimeout 5/' "/etc/apache2/apache2.conf"
    sed -i 's/^#*HostnameLookups .*/HostnameLookups Off/' "/etc/apache2/apache2.conf"
    sed -i 's/^#*LogLevel .*/LogLevel warn/' "/etc/apache2/apache2.conf"
    sed -i 's/^#*ServerTokens .*/ServerTokens Prod/' "/etc/apache2/conf-enabled/security.conf"
    sed -i 's/^#*ServerSignature .*/ServerSignature Off/' "/etc/apache2/conf-enabled/security.conf"
    sed -i 's/^#*TraceEnable .*/TraceEnable Off/' "/etc/apache2/conf-enabled/security.conf"
    grep -q "^Header unset ETag" /etc/apache2/conf-enabled/security.conf || echo "Header unset ETag" >> /etc/apache2/conf-enabled/security.conf
    grep -q "^FileETag none" /etc/apache2/conf-enabled/security.conf || echo "FileETag None" >> /etc/apache2/conf-enabled/security.conf
    sed -i 's/^#*SSLProtocol .*SSLProtocol all +TLSv1.2/' "/etc/apache2/mods-available/ssl.conf"
    sed -i 's/^#*SSLCipherSuite .*/SSLCipherSuite HIGH:!aNULL/' "/etc/apache2/mods-available/ssl.conf"
    sed -i 's/^#*SSLSessionCacheTimeout .*/SSLSessionCacheTimeout  300/' "/etc/apache2/mods-available/ssl.conf"
    sed -i 's/^#*SSLHonorCipherOrder .*/SSLHonorCipherOrder On/' "/etc/apache2/mods-available/ssl.conf"
    sed -i 's/^#*SSLInsecureRenegotiation .*/SSLInsecureRenegotiation On/' "/etc/apache2/mods-available/ssl.conf"
    sed -i 's/^#*SSLStrictSNIVHostCheck .*/SSLStrictSNIVHostCheck On/' "/etc/apache2/mods-available/ssl.conf"
    if command -v apt &> /dev/null; then
      ufw allow 80/tcp
      ufw allow 443/tcp
      ufw allow "Apache Full"
      ufw allow "Apache Secure"
      apt install libapache2-mod-security2
      apt install libapache2-mod-evasive
      a2enmod security2
      a2enmod headers
      a2enmod reqtimeout
      a2enmod evasive
    fi
    if command -v dnf &> /dev/null; then
      firewall-cmd --add-port=80/tcp --permanent
      firewall-cmd --add-port=443/tcp --permanent
      dnf install libapache2-mod-security2
      dnf install libapache2-mod-evasive
      a2enmod security2
      a2enmod headers
      a2enmod reqtimeout
      a2enmod evasive
    fi
  fi
  if [[ "${Services[i]}" == "4" ]]; then
    # === MySQL ===
    echo "Configuring MySQL..."
    if command -v apt &> /dev/null; then
      ufw allow 3306/tcp
    fi
    if command -v dnf &> /dev/null; then
      firewall-cmd --add-port=3306/tcp --permanent
    fi
  fi
  fi
  if [[ "${Services[i]}" == "5" ]]; then
    # === PHP ===
    echo "Configuring PHP..."

  fi
  fi
done
firewall-cmd --reload

# === Sysctl ===

rm /etc/sysctl.conf

echo "Reconfiguring Sysctl..."
curl -o /etc/sysctl.conf https://raw.githubusercontent.com/northkross/Sysctl/refs/heads/main/conf 2>/dev/null
if [ $? -ne 0 ]; then
  echo "Failed to download sysctl.conf"
  exit 1
fi
sysctl -w net.ipv6.conf.all.disable_ipv6=1 
sysctl -w net.ipv6.conf.default.disable_ipv6=1 
sysctl -w net.ipv6.route.flush=1 
sysctl –w kernel.unprivileged_bpf_disabled = 1 
echo "Reloading Sysctl..."
sysctl -p 

# === Forkbomb ===

echo "Enabling Forkbomb Protection..."
grep -q "^tmpfs /tmp tmpfs defaults,noexec,nosuid 0 0 " /etc/fstab || echo "tmpfs /tmp tmpfs defaults,noexec,nosuid 0 0 " >> /etc/fstab
grep -q "^* hard nproc 300" /etc/security/limits.conf || echo "* hard nproc 300" >> /etc/security/limits.conf

# === Malware ===

echo "Eliminating Malware..."
if command -v apt &> /dev/null; then
  if ! dpkg -l | grep -qw nmap; then
    apt purge nmap* -y
  if ! dpkg -l | grep -qw ncat; then
    apt purge ncat* -y
  if ! dpkg -l | grep -qw netcat; then
    apt purge netcat* -y
  if ! dpkg -l | grep -qw aircrack; then
    apt purge aircrack* -y
  if ! dpkg -l | grep -qw ophcrack; then
    apt purge ophcrack* -y
  if ! dpkg -l | grep -qw wireshark; then
    apt purge wireshark* -y
  if ! dpkg -l | grep -qw ettercap; then
    apt purge ettercap* -y
  if ! dpkg -l | grep -qw cawsay; then
    apt purge cowsay* -y
  if ! dpkg -l | grep -qw logkeys; then
    apt purge logkeys* -y
  if ! dpkg -l | grep -qw telnet; then
    apt purge telnet* -y
  if ! dpkg -l | grep -qw john; then
    apt purge john* -y
  if ! dpkg -l | grep -qw hydra; then
    apt purge hydra*
  if ! dpkg -l | grep -qw zenmap; then
    apt purge zenmap*
  if ! dpkg -l | grep -qw xcawsay; then
    apt purge xcowsay*
  if ! dpkg -l | grep -qw deluge; then
    apt purge deluge*
  if ! dpkg -l | grep -qw freeciv; then
    apt purge freeciv*
  if ! dpkg -l | grep -qw minetest; then
    apt purge minetest*
  if ! dpkg -l | grep -qw transmission; then
    apt purge transmission*
  if ! dpkg -l | grep -qw qbittorrent; then
    apt purge qbittorrent*
  if ! dpkg -l | grep -qw 4g8; then
    apt purge 4g8*
  if ! dpkg -l | grep -qw sqlmap; then
    apt purge sqlmap*
  if ! dpkg -l | grep -qw gobuster; then
    apt purge gobuster*
  if ! dpkg -l | grep -qw bind9; then
    apt purge bind9*
  if ! dpkg -l | grep -qw empire; then
    apt purge empire*
  if ! dpkg -l | grep -qw recon-ng; then
    apt purge recon-ng*
  apt autoremove -y

if command -v dnf &> /dev/null; then
  if ! dnf list installed | grep -qw nmap; then
    dnf remove nmap* -y
  if ! dnf list installed | grep -qw ncat; then
    dnf remove ncat* -y
  if ! dnf list installed | grep -qw netcat; then
    dnf remove netcat* -y
  if ! dnf list installed | grep -qw aircrack; then
    dnf remove aircrack* -y
  if ! dnf list installed | grep -qw ophcrack; then
    dnf remove ophcrack* -y
  if ! dnf list installed | grep -qw wireshark; then
    dnf remove wireshark* -y
  if ! dnf list installed | grep -qw ettercap; then
    dnf remove ettercap* -y
  if ! dnf list installed | grep -qw cawsay; then
    dnf remove cowsay* -y
  if ! dnf list installed | grep -qw logkeys; then
    dnf remove logkeys* -y
  if ! dnf list installed | grep -qw telnet; then
    dnf remove telnet* -y
  if ! dnf list installed | grep -qw john; then
    dnf remove john* -y
  if ! dnf list installed | grep -qw hydra; then
    dnf remove hydra*
  if ! dnf list installed | grep -qw zenmap; then
    dnf remove zenmap*
   if ! dnf list installed | grep -qw xcawsay; then
    dnf remove xcowsay*
  if ! dnf list installed | grep -qw deluge; then
    dnf remove deluge*
  if ! dnf list installed | grep -qw freeciv; then
    dnf remove freeciv*
  if ! dnf list installed | grep -qw minetest; then
    dnf remove minetest*
  if ! dnf list installed | grep -qw transmission; then
    dnf remove transmission*
  if ! dnf list installed | grep -qw qbittorrent; then
    dnf remove qbittorrent*
  if ! dnf list installed | grep -qw 4g8; then
    dnf remove 4g8*
  if ! dnf list installed | grep -qw sqlmap; then
    dnf remove sqlmap*
  if ! dnf list installed | grep -qw gobuster; then
    dnf remove gobuster*
  if ! dnf list installed | grep -qw bind9; then
    dnf remove bind9*
  if ! dnf list installed | grep -qw empire; then
    dnf remove empire*
  if ! dnf list installed | grep -qw recon-ng; then
    dnf remove recon-ng*
  dnf autoremove

# === Kernel ===
echo "Updating Kernel..."

apt-get dist-upgrade
