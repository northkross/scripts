#!/bin/bash

# Define whitelist location
WHITELIST="/etc/whitelist"

# Create and populate the whitelist
touch "$WHITELIST"
echo /usr/bin/passwd >> "$WHITELIST"
echo /usr/bin/sudo >> "$WHITELIST"
echo /bin/ping >> "$WHITELIST"

# Remove SUID/SGID bit from non-whitelisted files
find / -perm /6000 2>/dev/null | while read -r file; do
    if ! grep -qx "$file" "$WHITELIST"; then
        echo "Removing SUID or SGID bit from $file"
        chmod u-s,g-s "$file"
    else
        echo "Keeping SUID or SGID bit for essential file: $file"
    fi
done

# Remove world-writable permissions
find / -perm -o=w 2>/dev/null | while read -r file; do
    # Skip files in /tmp, /var/tmp, and /dev/shm
    if [[ "$file" == /tmp/* || "$file" == /var/tmp/* || "$file" == /dev/shm/* ]]; then
        echo "Skipping file in a temporary directory: $file"
        continue
    fi
    
    echo "Removing world-writable permissions from $file"
    chmod o-w "$file"
done



# Optionally remove the whitelist file if it should be temporary
rm "$WHITELIST"

DIRECTORIES=(
    "/tmp"
    "/var/tmp"
    "/dev/shm"
)

echo "Setting sticky bit on specified directories..."

# Loop through each directory and apply the sticky bit
for dir in "${DIRECTORIES[@]}"; do
    if [ -d "$dir" ]; then
        current_perms=$(stat -c "%a" "$dir")
        if (( current_perms % 10 != 7 )); then
            chmod 1777 "$dir"
            echo "Sticky bit set on $dir with permissions 1777."
        else
            echo "Sticky bit already set on $dir."
        fi
    else
        echo "Directory $dir does not exist."
    fi
done

echo "Sticky bit configuration completed."

chmod 600 /var/lib/pgsql/data/postgresql.conf
chmod 600 /var/lib/pgsql/data/pg_hba.conf

echo "current perms for passwd, shadow, and group are: "
ls -l /etc/passwd /etc/group /etc/shadow

chmod 644 /etc/passwd
chown root:root /etc/passwd

chmod 644 /etc/group
chown root:root /etc/group

chmod 600 /etc/shadow
chown root:shadow /etc/shadow

echo "new perms for passwd, shadow, and group are: "
ls -l /etc/passwd /etc/group /etc/shadow

echo "underprivalidged user or group may own a configuaation file:"
ls -l /etc/ | awk '{print $3":"$4,$9}' | grep -v "^root:root" | grep -v "^:"
